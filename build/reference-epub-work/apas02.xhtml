<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Item Writers</title><link rel="stylesheet" type="text/css" href="docbook-epub.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"/><link rel="prev" href="apa.xhtml" title="Appendix A. List of ItemReaders and ItemWriters"/><link rel="next" href="apb.xhtml" title="Appendix B. Meta-Data Schema"/></head><body><header/><section class="section" title="Item Writers" epub:type="division" id="itemWritersAppendix"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Item Writers</h2></div></div></div><div class="table" id="d5e4477"><div class="table-title">Table A.2. Available Item Writers</div><div class="table-contents"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col style="text-align: center; "/><col/></colgroup><thead><tr><th style="text-align: center; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Item Writer</th><th style="text-align: center; border-bottom: 0.5pt solid ; ">Description</th></tr></thead><tbody><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">AbstractItemStreamItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Abstract base class that combines the
            <code class="classname">ItemStream</code> and
            <code class="classname">ItemWriter</code> interfaces.</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">AmqpItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Given a Spring AmqpTemplate it provides
            for synchronous send method. The convertAndSend(Object)
             method lets you send POJO objects. </td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">CompositeItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Passes an item to the process method of each
            in an injected <span class="bold"><strong>List</strong></span> of <span class="bold"><strong>ItemWriter</strong></span> objects</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">FlatFileItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Writes to a flat file. Includes ItemStream and
            Skippable functionality. See section on Writing to a File</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">GemfireItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Using a GemfireOperations object, items wre either written 
            or removed from the Gemfire instance based on the configuration of the delete
            flag</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">HibernateItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">This item writer is hibernate session aware
            and handles some transaction-related work that a non-"hibernate
            aware" item writer would not need to know about and then delegates
            to another item writer to do the actual writing.</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">IbatisBatchItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Writes items in a batch using the iBatis API's
            directly. This ItemWriter is deprecated as of Spring Batch 3.0.</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">ItemWriterAdapter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Adapts any class to the
            <code class="classname">ItemWriter</code> interface.</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">JdbcBatchItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Uses batching features from a
            <code class="classname">PreparedStatement</code>, if available, and can
            take rudimentary steps to locate a failure during a
            <code class="methodname">flush</code>.</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">JmsItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Using a JmsOperations object, items are written 
            to the default queue via the JmsOperations.convertAndSend() method</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">JpaItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">This item writer is JPA EntityManager aware
            and handles some transaction-related work that a non-"jpa aware"
            <code class="classname">ItemWriter</code> would not need to know about and
            then delegates to another writer to do the actual writing.</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">MimeMessageItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Using Spring's JavaMailSender, items of type <code class="classname">MimeMessage</code> 
            are sent as mail messages</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">MongoItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Given a MongoOperations object, items are written
            via the MongoOperations.save(Object) method.  The actual write is delayed
            until the last possible moment before the transaction commits.</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Neo4jItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Given a Neo4jOperations object, items are persisted via the
            save(Object) method or deleted via the delete(Object) per the 
            <code class="classname">ItemWriter</code>'s configuration</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">PropertyExtractingDelegatingItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Extends AbstractMethodInvokingDelegator
            creating arguments on the fly. Arguments are created by retrieving
            the values from the fields in the item to be processed (via a
            SpringBeanWrapper) based on an injected array of field
            name</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">RepositoryItemWriter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Given a Spring Data CrudRepository implementation, 
            items are saved via the method specified in the configuration.</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; ">StaxEventItemWriter</td><td style="text-align: left; ">Uses an <span class="bold"><strong>ObjectToXmlSerializer</strong></span> implementation to
            convert each item to XML and then writes it to an XML file using
            StAX.</td></tr></tbody></table></div></div></section><footer/></body></html>