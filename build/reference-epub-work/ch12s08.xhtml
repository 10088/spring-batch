<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Step Flow</title><link rel="stylesheet" type="text/css" href="docbook-epub.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"/><link rel="prev" href="ch12s07.xhtml" title="Contexts"/><link rel="next" href="ch12s09.xhtml" title="Scaling a JSR-352 batch job"/></head><body><header/><section class="section" title="Step Flow" epub:type="subchapter" id="jsrStepFlow"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Step Flow</h2></div></div></div><p>Within a JSR-352 based job, the flow of steps works similarly as it does within Spring Batch.
            However, there are a few subtle differences:</p><p>
            </p><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item"><p>Decision's are steps - In a regular Spring Batch job, a decision is a state that does not
                        have an independent <code class="classname">StepExecution</code> or any of the rights and
                        responsibilities that go along with being a full step..  However, with JSR-352, a decision
                        is a step just like any other and will behave just as any other steps (transactionality,
                        it gets a <code class="classname">StepExecution</code>, etc).  This means that they are treated the
                        same as any other step on restarts as well.</p></li><li class="listitem" epub:type="list-item"><p><code class="classname">next</code> attribute and step transitions - In a regular job, these are
                        allowed to appear together in the same step.  JSR-352 allows them to both be used in the
                        same step with the next attribute taking precedence in evaluation.</p></li><li class="listitem" epub:type="list-item"><p>Transition element ordering - In a standard Spring Batch job, transition elements are
                        sorted from most specific to least specific and evaluated in that order.  JSR-352 jobs
                        evaluate transition elements in the order they are specified in the XML.</p></li></ul></div><p>
        </p></section><footer/></body></html>