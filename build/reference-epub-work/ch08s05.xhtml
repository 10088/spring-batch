<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Parallel Processing</title><link rel="stylesheet" type="text/css" href="docbook-epub.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"/><link rel="prev" href="ch08s04.xhtml" title="Listeners"/><link rel="next" href="ch08s06.xhtml" title="Declarative Iteration"/></head><body><header/><section class="section" title="Parallel Processing" epub:type="subchapter" id="repeatParallelProcessing"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Parallel Processing</h2></div></div></div><p>Implementations of <code class="classname">RepeatOperations</code> are not
    restricted to executing the callback sequentially. It is quite important
    that some implementations are able to execute their callbacks in parallel.
    To this end, Spring Batch provides the
    <code class="classname">TaskExecutorRepeatTemplate</code>, which uses the Spring
    <code class="classname">TaskExecutor</code> strategy to run the
    <code class="classname">RepeatCallback</code>. The default is to use a
    <code class="classname">SynchronousTaskExecutor</code>, which has the effect of
    executing the whole iteration in the same thread (the same as a normal
    <code class="classname">RepeatTemplate</code>).</p></section><footer/></body></html>