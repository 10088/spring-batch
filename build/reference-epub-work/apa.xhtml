<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Appendix A. List of ItemReaders and ItemWriters</title><link rel="stylesheet" type="text/css" href="docbook-epub.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"/><link rel="prev" href="ch13.xhtml" title="Chapter 13. Spring Batch Integration"/><link rel="next" href="apas02.xhtml" title="Item Writers"/></head><body><header/><section class="appendix" title="Appendix A. List of ItemReaders and ItemWriters" epub:type="appendix" id="listOfReadersAndWriters"><div class="titlepage"><div><div><h1 class="title">Appendix A. List of ItemReaders and ItemWriters</h1></div></div></div><section class="section" title="Item Readers" epub:type="division" id="itemReadersAppendix"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Item Readers</h2></div></div></div><div class="table" id="d5e4408"><div class="table-title">Table A.1. Available Item Readers</div><div class="table-contents"><table style="border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col style="text-align: center; "/><col/></colgroup><thead><tr><th style="text-align: center; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Item Reader</th><th style="text-align: center; border-bottom: 0.5pt solid ; ">Description</th></tr></thead><tbody><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">AbstractItemCountingItemStreamItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Abstract base class that provides basic
            restart capabilities by counting the number of items returned from
            an <code class="classname">ItemReader</code>.</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">AggregateItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">An ItemReader that delivers a list as its
            item, storing up objects from the injected ItemReader until they
            are ready to be packed out as a collection. This ItemReader should
            mark the beginning and end of records with the constant values in
            FieldSetMapper AggregateItemReader#<span class="bold"><strong>BEGIN_RECORD</strong></span> and
            AggregateItemReader#<span class="bold"><strong>END_RECORD</strong></span></td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">AmqpItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Given a Spring AmqpTemplate it provides
            synchronous receive methods. The receiveAndConvert() method 
            lets you receive POJO objects. </td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">FlatFileItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Reads from a flat file. Includes ItemStream
            and Skippable functionality. See section on Read from a
            File</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">HibernateCursorItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Reads from a cursor based on an HQL query. See
            section on Reading from a Database</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">HibernatePagingItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Reads from a paginated HQL query</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">IbatisPagingItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Reads via iBATIS based on a query. Pages
            through the rows so that large datasets can be read without
            running out of memory. See HOWTO - Read from a Database. This
            ItemReader is now deprecated as of Spring Batch 3.0.</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">ItemReaderAdapter</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Adapts any class to the
            <code class="classname">ItemReader</code> interface.</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">JdbcCursorItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Reads from a database cursor via JDBC. See
            HOWTO - Read from a Database</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">JdbcPagingItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Given a SQL statement, pages through the rows,
            such that large datasets can be read without running out of
            memory</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">JmsItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Given a Spring JmsOperations object and a JMS
            Destination or destination name to send errors, provides items
            received through the injected JmsOperations receive()
            method</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">JpaPagingItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Given a JPQL statement, pages through the
            rows, such that large datasets can be read without running out of
            memory</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">ListItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Provides the items from a list, one at a
            time</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">MongoItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Given a MongoOperations object and JSON based MongoDB
            query, provides items received from the MongoOperations find method</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Neo4jItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Given a Neo4jOperations object and the components of a 
            Cyhper query, items are returned as the result of the Neo4jOperations.query
            method</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">RepositoryItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Given a Spring Data PagingAndSortingRepository object, 
            a Sort and the name of method to execute, returns items provided by the 
            Spring Data repository implementation</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">StoredProcedureItemReader</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">Reads from a database cursor resulting from the
            execution of a database stored procedure. See HOWTO - Read from a 
            Database</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; ">StaxEventItemReader</td><td style="text-align: left; ">Reads via StAX. See HOWTO - Read from a
            File</td></tr></tbody></table></div></div></section></section><footer/></body></html>